{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dokuly PLM System Dokuly is an open-source Product Lifecycle Management system. Built to be easy to use, and easy to maintain, for teams that move fast. This is a tool for designing and managing products and systems of all sizes. Dokuly is free to use and simple to set up. See the getting started guide If you don't want to deal with hosting, check out dokuly.com . The community forum can be found at dokuly.forum Features Product Data Part numbering BOM management Revision control Alternate parts Issues Change history with BOM comparison Release management Part-related files and documentation Vendor pricing with price breaks Inventory Documents Document numbering Automatic front page generation Built-in viewer Custom document types, width document number prefixes Issues Projects Project-based access control Time tracking with custom tasks Time estimation Access control Gantt Purchasing Manage vendors and suppliers Add suppliers for parts Inventory forecasting PO generation Automatical PO creation from BoM, selecting the cheapest vendor at each quantity Requirements Track requirements in a model-based environment Derived, hierarchical, and superseding relations API Support for multiple API keys Project-based access control per API key API-key expiry date Docs Contribution Dokuly was originally developed as an internal tool by Norsk Datateknikk and has since been released as an open-source project. The project relies on your contributions to stay updated with the latest features. Please submit issues and feature requests. This helps us see the needs of the users, and make a smooth experience. Bug fixes and PRs are highly appreciated.","title":"Dokuly PLM System"},{"location":"#dokuly-plm-system","text":"Dokuly is an open-source Product Lifecycle Management system. Built to be easy to use, and easy to maintain, for teams that move fast. This is a tool for designing and managing products and systems of all sizes. Dokuly is free to use and simple to set up. See the getting started guide If you don't want to deal with hosting, check out dokuly.com . The community forum can be found at dokuly.forum","title":"Dokuly PLM System"},{"location":"#features","text":"Product Data Part numbering BOM management Revision control Alternate parts Issues Change history with BOM comparison Release management Part-related files and documentation Vendor pricing with price breaks Inventory Documents Document numbering Automatic front page generation Built-in viewer Custom document types, width document number prefixes Issues Projects Project-based access control Time tracking with custom tasks Time estimation Access control Gantt Purchasing Manage vendors and suppliers Add suppliers for parts Inventory forecasting PO generation Automatical PO creation from BoM, selecting the cheapest vendor at each quantity Requirements Track requirements in a model-based environment Derived, hierarchical, and superseding relations API Support for multiple API keys Project-based access control per API key API-key expiry date Docs","title":"Features"},{"location":"#contribution","text":"Dokuly was originally developed as an internal tool by Norsk Datateknikk and has since been released as an open-source project. The project relies on your contributions to stay updated with the latest features. Please submit issues and feature requests. This helps us see the needs of the users, and make a smooth experience. Bug fixes and PRs are highly appreciated.","title":"Contribution"},{"location":"api_manual/","text":"","title":"Api manual"},{"location":"assemblies/","text":"","title":"Making Assemblies"},{"location":"bom_management/","text":"","title":"BOM for PCBA's and Assemblies"},{"location":"documents/","text":"","title":"Documents"},{"location":"first_part/","text":"","title":"Creating your first Part"},{"location":"installation/","text":"Installation guide Development with Docker (Windows) Install WSL2 and set it as default WSL version. Download from here . bash wsl --set-default-version 2 Enable Hardware virtualization in BIOS. Follow this link . Install Docker Desktop. Download from here . Run ./localServer.ps1 script to build and run images. The localServer.ps1 script takes care of the migrations and has a cleanup function, clearing old images from cache, if you do not want to clear, run the following: ```bash docker compose -f docker-compose-dev.yml build docker compose -f docker-compose-dev.yml run --rm web python /dokuly_image/dokuly/manage.py makemigrations docker compose -f docker-compose-dev.yml run --rm web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev.yml up ``` localServer.ps1 builds both Django and PostgreSQL services Run start_webpack ( or npm run dev ) to build main. If Node.js is not installed, follow steps 2 and 12 for Install Remaining Dependencies Make sure to install with Node.js version 14.19.0 and npm 6.14.16. Download from here . Install webpack npm install --save-dev webpack . Local Django development server should run on localhost:8000 Both db (postgres / psql) and Django are accessible through CLI in the docker desktop Development with Docker (Mac) When developing with Apple silicon (M1), a special Docker version must be installed. Find the correct package here . Development (Linux) If working on Debian Linux. Run the script debain_install_dependencies, to install the necessary dependencies to run the dokuly Docker. Build Django and PostgreSQL services Confirm Docker Compose-version and download Docker Compose for Linux. bash mkdir -p ~/.docker/cli-plugins/ curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose Restart the machine. bash sudo systemctl reboot Set permission so that Docker Compose is executable. bash chmod +x ~/.docker/cli-plugins/docker-compose sudo chown $USER /var/run/docker.sock Verify the installation. ```bash docker compose version # output should be similar to this: Docker Compose version v.2.2.3 ``` Run and build containers from root of dokuly project. bash docker compose -f docker-compose-dev.yml build docker compose -f docker-compose-dev.yml run -u root web python /dokuly_image/dokuly/manage.py makemigrations docker compose -f docker-compose-dev.yml run -u root web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev.yml up On Mac: ```bash docker compose -f docker-compose-dev-mac.yml build docker compose -f docker-compose-dev-mac.yml run -u root web python /dokuly_image/dokuly/manage.py makemigrations docker compose -f docker-compose-dev-mac.yml run -u root web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev-mac.yml up ``` If you enconter the error: bash Status: cgroups: cgroup mountpoint does not exist: unknown, Code: 1 Run the following workaround: bash sudo mkdir /sys/fs/cgroup/systemd sudo mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd This will build both Django and PostgreSQL, as they are built together in the same docker-compose file.","title":"Installation guide"},{"location":"installation/#installation-guide","text":"","title":"Installation guide"},{"location":"installation/#development-with-docker-windows","text":"Install WSL2 and set it as default WSL version. Download from here . bash wsl --set-default-version 2 Enable Hardware virtualization in BIOS. Follow this link . Install Docker Desktop. Download from here . Run ./localServer.ps1 script to build and run images. The localServer.ps1 script takes care of the migrations and has a cleanup function, clearing old images from cache, if you do not want to clear, run the following: ```bash docker compose -f docker-compose-dev.yml build docker compose -f docker-compose-dev.yml run --rm web python /dokuly_image/dokuly/manage.py makemigrations docker compose -f docker-compose-dev.yml run --rm web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev.yml up ``` localServer.ps1 builds both Django and PostgreSQL services Run start_webpack ( or npm run dev ) to build main. If Node.js is not installed, follow steps 2 and 12 for Install Remaining Dependencies Make sure to install with Node.js version 14.19.0 and npm 6.14.16. Download from here . Install webpack npm install --save-dev webpack . Local Django development server should run on localhost:8000 Both db (postgres / psql) and Django are accessible through CLI in the docker desktop","title":"Development with Docker (Windows)"},{"location":"installation/#development-with-docker-mac","text":"When developing with Apple silicon (M1), a special Docker version must be installed. Find the correct package here .","title":"Development with Docker (Mac)"},{"location":"installation/#development-linux","text":"If working on Debian Linux. Run the script debain_install_dependencies, to install the necessary dependencies to run the dokuly Docker.","title":"Development (Linux)"},{"location":"installation/#build-django-and-postgresql-services","text":"Confirm Docker Compose-version and download Docker Compose for Linux. bash mkdir -p ~/.docker/cli-plugins/ curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose Restart the machine. bash sudo systemctl reboot Set permission so that Docker Compose is executable. bash chmod +x ~/.docker/cli-plugins/docker-compose sudo chown $USER /var/run/docker.sock Verify the installation. ```bash docker compose version # output should be similar to this: Docker Compose version v.2.2.3 ``` Run and build containers from root of dokuly project. bash docker compose -f docker-compose-dev.yml build docker compose -f docker-compose-dev.yml run -u root web python /dokuly_image/dokuly/manage.py makemigrations docker compose -f docker-compose-dev.yml run -u root web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev.yml up On Mac: ```bash docker compose -f docker-compose-dev-mac.yml build docker compose -f docker-compose-dev-mac.yml run -u root web python /dokuly_image/dokuly/manage.py makemigrations docker compose -f docker-compose-dev-mac.yml run -u root web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev-mac.yml up ``` If you enconter the error: bash Status: cgroups: cgroup mountpoint does not exist: unknown, Code: 1 Run the following workaround: bash sudo mkdir /sys/fs/cgroup/systemd sudo mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd This will build both Django and PostgreSQL, as they are built together in the same docker-compose file.","title":"Build Django and PostgreSQL services"},{"location":"notes_and_markdown/","text":"","title":"Notes and markdown"},{"location":"parts_to_pcbas/","text":"","title":"From Parts to PCBA's"},{"location":"production_control/","text":"","title":"Production control"},{"location":"project_management/","text":"","title":"Project management"},{"location":"projects_and_customers/","text":"Projects and Customers In dokuly, most items are connected to a project, which in turn is connected to a customer. For getting the best experience using dokuly, make sure you have created a suitable customer and project. A default one is usually provided to get you going. Create a new Customer Click on Customers in the sidebar: or go to /customers in your browser. Next click on New customer A modal dialog will open, enter your information about the new customer, then hit submit when you are done: Create a new Project Click on Projects in the sidebar: or go to /projects in your browser. Next click on New project A modal dialog will open, enter your information about the new project, then hit submit when you are done:","title":"Projects and Customers"},{"location":"projects_and_customers/#projects-and-customers","text":"In dokuly, most items are connected to a project, which in turn is connected to a customer. For getting the best experience using dokuly, make sure you have created a suitable customer and project. A default one is usually provided to get you going.","title":"Projects and Customers"},{"location":"projects_and_customers/#create-a-new-customer","text":"Click on Customers in the sidebar: or go to /customers in your browser. Next click on New customer A modal dialog will open, enter your information about the new customer, then hit submit when you are done:","title":"Create a new Customer"},{"location":"projects_and_customers/#create-a-new-project","text":"Click on Projects in the sidebar: or go to /projects in your browser. Next click on New project A modal dialog will open, enter your information about the new project, then hit submit when you are done:","title":"Create a new Project"},{"location":"quickstart/","text":"Quickstart Make sure docker and other dependencies are installed. To find the dependencies take a look at the Installation tab in the top navbar. Then follow these steps: Create a .env file (it can be left empty) Then set a value within the string quotes. Next; Build the project. This can be done using docker compose -f docker-compose-dev.yml build or for mac / linux: docker compose -f docker-compose-dev-mac.yml build Build frontend using npm npm i npm run build Run the project Run migrations docker compose -f docker-compose-dev.yml run web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev.yml up Access dokuly In your web browser, dokuly can be accessed at http://oss.dokuly.localhost:8000 . Logging in for the first time on localhost The PLM comes with some default data. A user is created with the username \"ossuser\" and password: \"oss_password\". This can be used to login with for the first time to start using and configuring dokuly for your use-case. Configure self hosting of Dokuly To start hosting the service on your own machine you have to have all dependencies installed. This includes docker and node. See the table of contents for more information on installing these dependencies. Nginx proxy Local Hosting Setup Guide To enable access to your locally hosted project on your local network or VPN, follow these steps to configure an NGINX proxy. Directly using your machine's local IP address might not suffice, hence the need for these adjustments: Locate the NGINX Configuration Navigate to the nginx folder where crucial configuration files reside. Edit the Configuration File Within the nginx folder, find and open the nginx.conf file for editing. Update IP Address : Search for a line starting with server_name , typically containing an IP like 10.0.0.21 . Replace it with your machine's local network IP. To find your IP address: On Linux/Mac : Open a terminal and enter ifconfig . On Windows : Open Command Prompt and type ipconfig . Look for the IPv4 address under your network connection, usually formatted as 192.168.x.x . Set Project Name : Locate the line proxy_set_header Host and change the adjacent value to your project's name. If you haven't set up a project name, run the self_host_create_new_tenant script. Save and Close After making the necessary edits, save the changes and close the nginx.conf file. Restart NGINX To apply your changes, execute the self_host_restart.ps1 script located in the self_hosting folder. By following these steps, your locally hosted project should become accessible to others on the same network or VPN using your computer's local IP address. SMTP Email Dokuly has support for smtp email, and some basic functions via email like resetting your user's password. To setup the smtp you will need your own smtp server setup, and then in the .env file add the following fields: EMAIL_HOST = \"your_smtp_provider_address\" EMAIL_PORT = your_port EMAIL_HOST_USER = \"your_smtp_username\" EMAIL_HOST_PASSWORD = \"your_smtp_password\" EMAIL_SENDER = 'your_smtp_sender_address' Replace the values with your own information from your smtp provider.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"Make sure docker and other dependencies are installed. To find the dependencies take a look at the Installation tab in the top navbar. Then follow these steps:","title":"Quickstart"},{"location":"quickstart/#create-a-env-file-it-can-be-left-empty","text":"Then set a value within the string quotes. Next; Build the project. This can be done using docker compose -f docker-compose-dev.yml build or for mac / linux: docker compose -f docker-compose-dev-mac.yml build","title":"Create a .env file (it can be left empty)"},{"location":"quickstart/#build-frontend-using-npm","text":"npm i npm run build","title":"Build frontend using npm"},{"location":"quickstart/#run-the-project","text":"Run migrations docker compose -f docker-compose-dev.yml run web python /dokuly_image/dokuly/manage.py migrate docker compose -f docker-compose-dev.yml up","title":"Run the project"},{"location":"quickstart/#access-dokuly","text":"In your web browser, dokuly can be accessed at http://oss.dokuly.localhost:8000 .","title":"Access dokuly"},{"location":"quickstart/#logging-in-for-the-first-time-on-localhost","text":"The PLM comes with some default data. A user is created with the username \"ossuser\" and password: \"oss_password\". This can be used to login with for the first time to start using and configuring dokuly for your use-case.","title":"Logging in for the first time on localhost"},{"location":"quickstart/#configure-self-hosting-of-dokuly","text":"To start hosting the service on your own machine you have to have all dependencies installed. This includes docker and node. See the table of contents for more information on installing these dependencies.","title":"Configure self hosting of Dokuly"},{"location":"quickstart/#nginx-proxy","text":"","title":"Nginx proxy"},{"location":"quickstart/#local-hosting-setup-guide","text":"To enable access to your locally hosted project on your local network or VPN, follow these steps to configure an NGINX proxy. Directly using your machine's local IP address might not suffice, hence the need for these adjustments: Locate the NGINX Configuration Navigate to the nginx folder where crucial configuration files reside. Edit the Configuration File Within the nginx folder, find and open the nginx.conf file for editing. Update IP Address : Search for a line starting with server_name , typically containing an IP like 10.0.0.21 . Replace it with your machine's local network IP. To find your IP address: On Linux/Mac : Open a terminal and enter ifconfig . On Windows : Open Command Prompt and type ipconfig . Look for the IPv4 address under your network connection, usually formatted as 192.168.x.x . Set Project Name : Locate the line proxy_set_header Host and change the adjacent value to your project's name. If you haven't set up a project name, run the self_host_create_new_tenant script. Save and Close After making the necessary edits, save the changes and close the nginx.conf file. Restart NGINX To apply your changes, execute the self_host_restart.ps1 script located in the self_hosting folder. By following these steps, your locally hosted project should become accessible to others on the same network or VPN using your computer's local IP address.","title":"Local Hosting Setup Guide"},{"location":"quickstart/#smtp-email","text":"Dokuly has support for smtp email, and some basic functions via email like resetting your user's password. To setup the smtp you will need your own smtp server setup, and then in the .env file add the following fields: EMAIL_HOST = \"your_smtp_provider_address\" EMAIL_PORT = your_port EMAIL_HOST_USER = \"your_smtp_username\" EMAIL_HOST_PASSWORD = \"your_smtp_password\" EMAIL_SENDER = 'your_smtp_sender_address' Replace the values with your own information from your smtp provider.","title":"SMTP Email"},{"location":"tasks_and_timetracking/","text":"","title":"Tasks and timetracking"},{"location":"user_manual/","text":"User manual Projects and Customers In dokuly, most items are connected to a project, which in turn is connected to a customer. For getting the best experience using dokuly, make sure you have created a suitable customer and project. A default one is usually provided to get you going. If you need to create Create and manage your first Part From Parts to PCBA's Putting it all together with Assemblies Project management Tasks and Timetracking Documents and notes","title":"User manual"},{"location":"user_manual/#user-manual","text":"","title":"User manual"},{"location":"user_manual/#projects-and-customers","text":"In dokuly, most items are connected to a project, which in turn is connected to a customer. For getting the best experience using dokuly, make sure you have created a suitable customer and project. A default one is usually provided to get you going. If you need to create","title":"Projects and Customers"},{"location":"user_manual/#create-and-manage-your-first-part","text":"","title":"Create and manage your first Part"},{"location":"user_manual/#from-parts-to-pcbas","text":"","title":"From Parts to PCBA's"},{"location":"user_manual/#putting-it-all-together-with-assemblies","text":"","title":"Putting it all together with Assemblies"},{"location":"user_manual/#project-management","text":"","title":"Project management"},{"location":"user_manual/#tasks-and-timetracking","text":"","title":"Tasks and Timetracking"},{"location":"user_manual/#documents-and-notes","text":"","title":"Documents and notes"},{"location":"user_manual/#_1","text":"","title":""},{"location":"admin/api/","text":"","title":"API"},{"location":"admin/roles_and_permissions/","text":"","title":"Roles and Permissions"},{"location":"admin/settings/","text":"","title":"Settings"},{"location":"admin/user_management/","text":"","title":"User Management"}]}